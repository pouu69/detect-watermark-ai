name: Deploy Website

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      invalidate_cache:
        description: 'CloudFront 캐시 무효화 실행 여부'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      s3_bucket: ${{ steps.export_outputs.outputs.s3_bucket }}
      cloudfront_distribution_id: ${{ steps.export_outputs.outputs.cloudfront_distribution_id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
        
      - name: Export Terraform Outputs
        id: export_outputs
        working-directory: ./terraform
        run: |
          # 디버그 메시지 출력
          echo "Terraform outputs:"
          terraform output
          
          # 출력을 파일로 저장
          terraform output > terraform_outputs.txt
          
          # 파일에서 값 추출
          S3_BUCKET=$(grep "website_bucket_name" terraform_outputs.txt | awk -F'= ' '{print $2}' | tr -d '"' | tr -d ' ')
          CLOUDFRONT_DISTRIBUTION_ID=$(grep "cloudfront_distribution_id" terraform_outputs.txt | awk -F'= ' '{print $2}' | tr -d '"' | tr -d ' ')
          
          echo "Extracted S3_BUCKET: ${S3_BUCKET}"
          echo "Extracted CLOUDFRONT_DISTRIBUTION_ID: ${CLOUDFRONT_DISTRIBUTION_ID}"
          
          # 값이 비어있지 않은지 확인
          if [ -z "$S3_BUCKET" ] || [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            echo "Error: Failed to extract Terraform outputs"
            exit 1
          fi
          
          # GitHub 환경 변수로 설정
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=${CLOUDFRONT_DISTRIBUTION_ID}" >> $GITHUB_ENV
          
          # 작업 출력으로 설정
          echo "s3_bucket=${S3_BUCKET}" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=${CLOUDFRONT_DISTRIBUTION_ID}" >> $GITHUB_OUTPUT
  
  build-and-deploy:
    name: 'Build and Deploy'
    needs: terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        env:
          VITE_GOOGLE_ANALYTICS_ID: "${{ secrets.GOOGLE_ANALYTICS_ID }}"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Debug Environment Variables
        run: |
          echo "S3_BUCKET from env: ${{ env.S3_BUCKET }}"
          echo "CLOUDFRONT_DISTRIBUTION_ID from env: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "S3_BUCKET from job output: ${{ needs.terraform.outputs.s3_bucket }}"
          echo "CLOUDFRONT_DISTRIBUTION_ID from job output: ${{ needs.terraform.outputs.cloudfront_distribution_id }}"
      
      - name: Set Environment Variables
        run: |
          echo "S3_BUCKET=${{ needs.terraform.outputs.s3_bucket }}" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ needs.terraform.outputs.cloudfront_distribution_id }}" >> $GITHUB_ENV
      
      - name: Deploy to S3
        run: |
          echo "Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete
      
      - name: Invalidate CloudFront Cache
        if: ${{ github.event.inputs.invalidate_cache != 'false' }}
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
